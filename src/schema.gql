# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Base {
  """Example field (placeholder)"""
  exampleField: Int!
}

"""Cursor for paging through collections"""
scalar ConnectionCursor

input CreateBaseInput {
  """Example field (placeholder)"""
  exampleField: Int!
}

input CreateManyUsersInput {
  """Array of records to create"""
  users: [CreateUser!]!
}

input CreateOneUserInput {
  """The record to create"""
  user: CreateUser!
}

input CreateOrganizationInput {
  """Example field (placeholder)"""
  exampleField: Int!
}

input CreateUser {
  age: Float
  email: String
  id: ID
  name: String
}

input CreateUserInput {
  """Example field (placeholder)"""
  exampleField: Int!
}

input CursorPaging {
  """Paginate after opaque cursor"""
  after: ConnectionCursor

  """Paginate before opaque cursor"""
  before: ConnectionCursor

  """Paginate first"""
  first: Int

  """Paginate last"""
  last: Int
}

type DeleteManyResponse {
  """The number of records deleted."""
  deletedCount: Int!
}

input DeleteManyUsersInput {
  """Filter to find records to delete"""
  filter: UserDeleteFilter!
}

input DeleteOneUserInput {
  """The id of the record to delete."""
  id: ID!
}

input IDFilterComparison {
  eq: ID
  gt: ID
  gte: ID
  iLike: ID
  in: [ID!]
  is: Boolean
  isNot: Boolean
  like: ID
  lt: ID
  lte: ID
  neq: ID
  notILike: ID
  notIn: [ID!]
  notLike: ID
}

type Mutation {
  createBase(createBaseInput: CreateBaseInput!): Base!
  createManyUsers(input: CreateManyUsersInput!): [User!]!
  createOneUser(input: CreateOneUserInput!): User!
  createOrganization(createOrganizationInput: CreateOrganizationInput!): Organization!
  createUser(createUserInput: CreateUserInput!): User!
  deleteManyUsers(input: DeleteManyUsersInput!): DeleteManyResponse!
  deleteOneUser(input: DeleteOneUserInput!): UserDeleteResponse!
  removeBase(id: Int!): Base!
  removeOrganization(id: Int!): Organization!
  removeUser(id: Int!): User!
  updateBase(updateBaseInput: UpdateBaseInput!): Base!
  updateManyUsers(input: UpdateManyUsersInput!): UpdateManyResponse!
  updateOneUser(input: UpdateOneUserInput!): User!
  updateOrganization(updateOrganizationInput: UpdateOrganizationInput!): Organization!
  updateUser(updateUserInput: UpdateUserInput!): User!
}

input NumberFieldComparison {
  between: NumberFieldComparisonBetween
  eq: Float
  gt: Float
  gte: Float
  in: [Float!]
  is: Boolean
  isNot: Boolean
  lt: Float
  lte: Float
  neq: Float
  notBetween: NumberFieldComparisonBetween
  notIn: [Float!]
}

input NumberFieldComparisonBetween {
  lower: Float!
  upper: Float!
}

type Organization {
  """Example field (placeholder)"""
  exampleField: Int!
}

type PageInfo {
  """The cursor of the last returned record."""
  endCursor: ConnectionCursor

  """true if paging forward and there are more records."""
  hasNextPage: Boolean

  """true if paging backwards and there are more records."""
  hasPreviousPage: Boolean

  """The cursor of the first returned record."""
  startCursor: ConnectionCursor
}

type Query {
  base(id: Int!): Base!
  bases: [Base!]!
  hello: String!
  organization(id: Int!): Organization!
  organizations: [Organization!]!
  user(
    """The id of the record to find."""
    id: ID!
  ): User
  users(
    """Specify to filter the records returned."""
    filter: UserFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [UserSort!]! = []
  ): UserConnection!
}

"""Sort Directions"""
enum SortDirection {
  ASC
  DESC
}

"""Sort Nulls Options"""
enum SortNulls {
  NULLS_FIRST
  NULLS_LAST
}

input StringFieldComparison {
  eq: String
  gt: String
  gte: String
  iLike: String
  in: [String!]
  is: Boolean
  isNot: Boolean
  like: String
  lt: String
  lte: String
  neq: String
  notILike: String
  notIn: [String!]
  notLike: String
}

input UpdateBaseInput {
  """Example field (placeholder)"""
  exampleField: Int
  id: Int!
}

type UpdateManyResponse {
  """The number of records updated."""
  updatedCount: Int!
}

input UpdateManyUsersInput {
  """Filter used to find fields to update"""
  filter: UserUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateUser!
}

input UpdateOneUserInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateUser!
}

input UpdateOrganizationInput {
  """Example field (placeholder)"""
  exampleField: Int
  id: Int!
}

input UpdateUser {
  age: Float
  email: String
  id: ID
  name: String
}

input UpdateUserInput {
  """Example field (placeholder)"""
  exampleField: Int
  id: Int!
}

type User {
  age: Float
  email: String!
  id: ID!
  name: String!
}

type UserAggregateGroupBy {
  age: Float
  email: String
  id: ID
  name: String
}

type UserAvgAggregate {
  age: Float
  id: Float
}

type UserConnection {
  """Array of edges."""
  edges: [UserEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

type UserCountAggregate {
  age: Int
  email: Int
  id: Int
  name: Int
}

input UserDeleteFilter {
  age: NumberFieldComparison
  and: [UserDeleteFilter!]
  email: StringFieldComparison
  id: IDFilterComparison
  name: StringFieldComparison
  or: [UserDeleteFilter!]
}

type UserDeleteResponse {
  age: Float
  email: String
  id: ID
  name: String
}

type UserEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the User"""
  node: User!
}

input UserFilter {
  age: NumberFieldComparison
  and: [UserFilter!]
  email: StringFieldComparison
  id: IDFilterComparison
  name: StringFieldComparison
  or: [UserFilter!]
}

type UserMaxAggregate {
  age: Float
  email: String
  id: ID
  name: String
}

type UserMinAggregate {
  age: Float
  email: String
  id: ID
  name: String
}

input UserSort {
  direction: SortDirection!
  field: UserSortFields!
  nulls: SortNulls
}

enum UserSortFields {
  age
  email
  id
  name
}

type UserSumAggregate {
  age: Float
  id: Float
}

input UserUpdateFilter {
  age: NumberFieldComparison
  and: [UserUpdateFilter!]
  email: StringFieldComparison
  id: IDFilterComparison
  name: StringFieldComparison
  or: [UserUpdateFilter!]
}
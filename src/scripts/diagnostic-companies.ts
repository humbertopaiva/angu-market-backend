// src/scripts/diagnostic-companies.ts
import { NestFactory } from '@nestjs/core';
import { AppModule } from '../app.module';
import { CompaniesService } from '../modules/companies/companies.service';
import { Logger } from '@nestjs/common';

async function diagnoseCompaniesModule() {
  const logger = new Logger('CompanyDiagnostic');
  
  try {
    logger.log('üîç Iniciando diagn√≥stico do m√≥dulo de empresas...');
    
    // Criar aplica√ß√£o NestJS
    const app = await NestFactory.createApplicationContext(AppModule);
    
    // Obter o service de empresas
    const companiesService = app.get(CompaniesService);
    
    logger.log('‚úÖ CompaniesService instanciado com sucesso');
    
 
    // Teste 2: Buscar todas as empresas
    logger.log('üè¢ Testando busca de empresas...');
    try {
      const companies = await companiesService.findAll();
      logger.log(`‚úÖ Busca bem-sucedida: ${companies.length} empresas encontradas`);
      
      // Log detalhado das primeiras empresas
      companies.slice(0, 3).forEach((company, index) => {
        logger.log(`Empresa ${index + 1}: ${company.name} (ID: ${company.id}, Place: ${company.place?.name || 'N/A'})`);
      });
      
    } catch (error) {
      logger.error('‚ùå Erro ao buscar empresas:', error.message);
      logger.error('Stack trace:', error.stack);
    }
    
    // Teste 3: Verificar se h√° places dispon√≠veis
    logger.log('üè™ Testando busca por place (se houver empresas)...');
    try {
      const companies = await companiesService.findAll();
      if (companies.length > 0) {
        const firstPlaceId = companies[0].placeId;
        const companiesByPlace = await companiesService.findByPlace(firstPlaceId);
        logger.log(`‚úÖ Busca por place bem-sucedida: ${companiesByPlace.length} empresas no place ${firstPlaceId}`);
      } else {
        logger.log('‚ö†Ô∏è Nenhuma empresa encontrada para testar busca por place');
      }
    } catch (error) {
      logger.error('‚ùå Erro ao buscar empresas por place:', error.message);
    }
    
    // Teste 4: Verificar GraphQL Schema
    logger.log('üìã Verificando se o schema GraphQL foi gerado...');
    const fs = require('fs');
    const path = require('path');
    const schemaPath = path.join(process.cwd(), 'src/schema.gql');
    
    if (fs.existsSync(schemaPath)) {
      const schema = fs.readFileSync(schemaPath, 'utf8');
      if (schema.includes('type Company')) {
        logger.log('‚úÖ Schema GraphQL cont√©m tipo Company');
      } else {
        logger.error('‚ùå Tipo Company n√£o encontrado no schema GraphQL');
      }
      
      if (schema.includes('companies')) {
        logger.log('‚úÖ Query companies encontrada no schema');
      } else {
        logger.error('‚ùå Query companies n√£o encontrada no schema');
      }
    } else {
      logger.error('‚ùå Arquivo schema.gql n√£o encontrado');
    }
    
    logger.log('üéâ Diagn√≥stico conclu√≠do!');
    
    await app.close();
    
  } catch (error) {
    logger.error('üí• Erro cr√≠tico durante diagn√≥stico:', error.message);
    logger.error('Stack trace completo:', error.stack);
  }
}

// Executar diagn√≥stico
if (require.main === module) {
  diagnoseCompaniesModule()
    .then(() => {
      console.log('Diagn√≥stico finalizado');
      process.exit(0);
    })
    .catch((error) => {
      console.error('Erro no diagn√≥stico:', error);
      process.exit(1);
    });
}

export { diagnoseCompaniesModule };